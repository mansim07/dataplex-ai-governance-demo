<!DOCTYPE html>
{% macro render_if_exist(name, value) %}
  {% if value %}
    <div>{{name}}: {{value}}</div>
  {%- endif %}
{% endmacro %}
{% macro render_considerations(list) %}
  {% if list %}
  <ul>
  {% for item in list %}
    <li>{{ item.description }}</li>
  {% endfor %}
  </ul>
  {%- endif %}
{% endmacro %}
{% macro render_uri_list(list) %}
  {% if list %}
  <ul>
  {% for item in list %}
    <li><a href="{{ item }}">{{ item }}</a></li>
  {% endfor %}
  </ul>
  {%- endif %}
{% endmacro %}
{% macro render_all_datasets(datasets) %}
  <div class="col card">
    <h2 style='color:dodgerblue;'>Datasets</h2>
    {% for dataset in datasets %}
      <div class="row">
        <div class="col card">
          {% if dataset.name %}<h3 style='color:rgb(104, 166, 228);'> Dataset Name: </h3>{{ dataset.name }}{% endif %}
            {% if dataset.description %}<h3>Dataset description: </h3>{{ dataset.description }}{% endif %}
            {% if dataset.link %}<h3 style='color:rgb(104, 166, 228);'><b>Dataset link: </b></h3><a href="{{ dataset.link }}">{{ dataset.link }}</a></{% endif %}
            {% if dataset.graphics and dataset.graphics.collection %}
              {{ render_graphics(dataset.graphics.collection) }}
            {% endif %}
        </div>
      </div>
    {% endfor %}
  </div>
{% endmacro %}
{% macro render_graphics(graphics) %}
  <div class="img-container">
   {% if graphics.name %}<p> <b>{{ graphics.name }}</b></p>{% endif %}
  {% if graphics.description %}<p>{{ graphics.description }}</p>{% endif %}
  
  {% for graph in graphics %}
  {% if graph.name %}<h3 style='color:rgb(104, 166, 228);text-align:left;'><b>{{ graph.name }}</b></h3>{% endif %}
    <div class="img-item">
      <img src='data:image/jpeg;base64,{{ graph.image }}' alt='{{ graph.name }}' />
    </div>
  {% endfor %}
  </div>
{% endmacro %}
{% macro render_license(license) %}
{% if license.identifier %}
                <li>{{ license.identifier }}{% endif %}{% if license.custom_text %}{{ license.custom_text }}{% endif %}</li>
{% endmacro %}
{% macro metric_name(metric) %}
{{ metric.type }}{% if metric.threshold %}@{{ metric.threshold }}{% endif %}{% if metric.slice %}, {{ metric.slice }}{% endif %}
{% endmacro %}
{% macro metric_value(metric) %}
{{ metric.value }}{% if metric.confidence_interval %} ({{ metric.confidence_interval.lower_bound }}, {{ metric.confidence_interval.upper_bound }}){% endif %}
{% endmacro %}
{% macro render_quantitative_analysis(quantitative_analysis) %}
<div class="col card">
  <h2 style='color:dodgerblue;'>Quantitative Analysis</h2>
  {% if quantitative_analysis.performance_metrics %}
    {{ render_metrics_table(quantitative_analysis.performance_metrics )}}
  {% endif %}
  {% if quantitative_analysis.graphics.collection %}
    {{ render_metrics_graphics(quantitative_analysis.graphics) }}
  {% endif %}
</div>
{% endmacro %}
{% macro render_metrics_table(metrics) %}
<table class="center">
  <h3 style='color:rgb(104, 166, 228);'>Performance Metrics</h3><br>
  <tr><th style='color:black;background-color:powderblue;'>Name</th><th style='color:black;background-color:powderblue;'>Value</th></tr>
{% for metric in metrics %}
  <tr><td>{{ metric_name(metric) }}</td><td>{{ metric_value(metric) }}</td></tr>
{% endfor %}
</table>
{% endmacro %}
{% macro render_metrics_graphics(graphics) %}
    <div class="col">
      {% if graphics.description %}{{ graphics.description }}{% endif %}
      {{ render_graphics(graphics.collection) }}
  </div>
{% endmacro %}
<html lang="en">
<head>
<style>
  h1 {text-align: center;}
  h2 {color: dodgerblue;}
  .row {
    display: flex;
  }
  .col {
    flex: 2
    
  }
  .card {
    padding: 1em;
    border: 1px solid #DADCE0;
    margin: 10px;
    
  }
  .img-container {
    display: inline;
    flex-wrap: nowrap;
    justify-content: space-around;
    text-align: center;
    height: 50px;
    width: 50px
  }
  .img-item {
    flex: 1;
    display: inline;
  }
  .center {
    margin-left: auto;
    margin-right: auto;
  }
  table {
    margin-bottom: 10px;
  }
  table th {
    background: #7bc1dd;
  }
  table, th, td {
    border: 1px solid rgb(59, 27, 199);
    border-collapse: collapse;
  }
  th, td {
    border: 1px solid #ccc;
    height: 20px;
    text-align: left;
    padding: 5px 10px
  }
  caption { font-weight: bold; }
</style>
<!--
<title>
  Model Card{% if model_details.name %} for {{ model_details.name }}{% endif %}
</title> -->

</head>
<body>
  <h1 style='background-color:dodgerblue;color:white;height:40px;width:500px;align:center;text-align:center'>
    Model Card Demo {% if model_details.name %} for {{ model_details.name }}{% endif %}
  </h1>
    <div class="row">
    {% if model_details %}
      <div class="col card">
        <h2 style='color:dodgerblue;'>Model Details</h2>
          {% if model_details.overview %}<h3 style='color:rgb(104, 166, 228);'>Overview</h3>
          
         <p style='text-align:left;width:500px;'> 
           <img  style='width:100px;height:80px;float:right;clear:both;'  src="data:image/png;base64, " />
             
              {{  model_details.overview }}{% endif %} </p>
          {% if model_details.version and model_details.version.name %}<h3 style='color:rgb(104, 166, 228);'>Version</h3>
              {{ render_if_exist('name', model_details.version.name) }}
              {{ render_if_exist('date', model_details.version.date) }}
              {{ render_if_exist('diff', model_details.version.diff) }}
          {% endif %}
          {% if model_details.documentation %}<h3 style='color:rgb(104, 166, 228);'>Documentation</h3>
             <p style='text-align:left;width:500px;'>  {{ model_details.documentation }}{% endif %} </p>
          {% if model_details.owners %}<h3 style='color:rgb(104, 166, 228);'>Owners</h3>
            {% if model_details.owners|length > 1 %}
              {% for owner in model_details.owners %}
                <li>{{ owner.name }}, {{ owner.contact }}</li>
              {% endfor %}
            {% else %}
              {{ model_details.owners[0].name }}, {{ model_details.owners[0].contact }}
            {% endif %}
          {% endif %}
          {% if model_details.licenses %}
            <h3 style='color:rgb(104, 166, 228);'>Licenses</h3>
              <ul>{% for license in model_details.licenses %}{{ render_license(license) }}{% endfor %}
              </ul>{% endif %}
          {% if model_details.references %}
            <h3 style='color:rgb(104, 166, 228);'>References</h3>
              <ul>
              {% for reference in model_details.references %}
                <li><a href="{{ reference.reference }}">{{ reference.reference }}</a></li>
              {% endfor %}
              </ul>{% endif %}
          {% if model_details.citations %}
            <h3 style='color:rgb(104, 166, 228);'>Citations</h3>
            
              <ul> 
              {% for citation in model_details.citations %}
                <li> <p style='text-align:left;width:500px;'> {{ citation.citation }}</p></li>
              {% endfor %}
              </ul>{% endif %} 
        </div>
      {% endif %}
      {% if model_parameters.model_architecture or model_parameters.input_format or model_parameters.input_format_map or model_parameters.output_format or model_parameters.output_format_map %}
        <div class="col card">
          <h2 style='color:dodgerblue;'>Model Parameters</h2>
            {% if model_parameters.model_architecture %}
              <h3 style='color:rgb(104, 166, 228);'>Model Architecture</h3>
                <div style="white-space:pre-wrap;">{{ model_parameters.model_architecture }}</div>{% endif %}
            {% if model_parameters.input_format %}<h3 style='color:rgb(104, 166, 228);'>Input Format</h3>
              <div style="white-space:pre-wrap;">{{ model_parameters.input_format }}</div>{% endif %}
            {% if model_parameters.input_format_map %}
              <h3 style='color:rgb(104, 166, 228);' >Input Format</h3>
              <table>
              <tr><th>Key</th><th>Value</th></tr>
              {% for kv in model_parameters.input_format_map %}
              <tr><td>{{ kv.key }}</td><td>{{ kv.value }}</td></tr>{% endfor %}</table>{% endif %}
            {% if model_parameters.output_format %}<h3 style='color:rgb(104, 166, 228);'>Output Format</h3>
              <div style="white-space:pre-wrap;">{{ model_parameters.output_format }}</div>{% endif %}
            {% if model_parameters.output_format_map %}
              <h3 style='color:rgb(104, 166, 228);'>Output Format</h3>
              <table>
              <tr><th>Key</th><th>Value</th></tr>
              {% for kv in model_parameters.output_format_map %}
              <tr><td>{{ kv.key }}</td><td>{{ kv.value }}</td></tr>{% endfor %}</table>{% endif %}
        </div>
      {% endif %}
      {% if considerations and (considerations.users or considerations.use_cases or considerations.limitations or considerations.tradeoffs or considerations.ethical_considerations) %}
      <div class="col card">
        <h2 style='color:dodgerblue;'>Considerations</h2>
          {% if considerations.users %}
            <h3 style='color:rgb(104, 166, 228);'>Intended Users</h3>
              {{ render_considerations(considerations.users) }}
          {% endif %}
          {% if considerations.use_cases %}
            <h3 style='color:rgb(104, 166, 228);'>Use Cases</h3>
              {{ render_considerations(considerations.use_cases) }}
          {% endif %}
          {% if considerations.limitations %}
            <h3 style='color:rgb(104, 166, 228);'>Limitations</h3>
              {{ render_considerations(considerations.limitations) }}
          {% endif %}
          {% if considerations.tradeoffs %}
            <h3 style='color:rgb(104, 166, 228);'>Tradeoffs</h3>
              {{ render_considerations(considerations.tradeoffs) }}
          {% endif %}
          {% if considerations.ethical_considerations %}
            <h3 style='color:rgb(104, 166, 228);'>Ethical Considerations</h3>
             
              <ul> <p style='text-align:left;width:500px;'> </p>{% for risk in considerations.ethical_considerations %}
                <li>
                  <div><p style='text-align:left;width:500px;'>Risk: {{ risk.name }}</p></div>
                  <div>Mitigation Strategy: {{ risk.mitigation_strategy }}</div>
                </li>{% endfor %} </ul>{% endif %} 
      </div>
      {% endif %}
    </div>
    {% if model_parameters.data %}
      {{ render_all_datasets(model_parameters.data) }}
    {% endif %}
    {% if quantitative_analysis.performance_metrics or quantitative_analysis.graphics.collection %}
      {{ render_quantitative_analysis(quantitative_analysis) }}
    {% endif %}
</body>
</html>